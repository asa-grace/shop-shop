{"ast":null,"code":"import invariant from '../jsutils/invariant';\nimport isPromise from '../jsutils/isPromise';\nimport { parse } from '../language/parser';\nimport { execute } from '../execution/execute';\nimport { getIntrospectionQuery } from './introspectionQuery';\n/**\r\n * Build an IntrospectionQuery from a GraphQLSchema\r\n *\r\n * IntrospectionQuery is useful for utilities that care about type and field\r\n * relationships, but do not need to traverse through those relationships.\r\n *\r\n * This is the inverse of buildClientSchema. The primary use case is outside\r\n * of the server context, for instance when doing schema comparisons.\r\n */\n\nexport function introspectionFromSchema(schema, options) {\n  var queryAST = parse(getIntrospectionQuery(options));\n  var result = execute(schema, queryAST);\n  /* istanbul ignore next */\n\n  !isPromise(result) && !result.errors && result.data || invariant(0);\n  return result.data;\n}","map":{"version":3,"sources":["C:/Users/Asa/Desktop/repos/shop-shop/client/node_modules/graphql/utilities/introspectionFromSchema.mjs"],"names":["invariant","isPromise","parse","execute","getIntrospectionQuery","introspectionFromSchema","schema","options","queryAST","result","errors","data"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,sBAAtB;AACA,OAAOC,SAAP,MAAsB,sBAAtB;AACA,SAASC,KAAT,QAAsB,oBAAtB;AACA,SAASC,OAAT,QAAwB,sBAAxB;AACA,SAASC,qBAAT,QAAsC,sBAAtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,uBAAT,CAAiCC,MAAjC,EAAyCC,OAAzC,EAAkD;AACvD,MAAIC,QAAQ,GAAGN,KAAK,CAACE,qBAAqB,CAACG,OAAD,CAAtB,CAApB;AACA,MAAIE,MAAM,GAAGN,OAAO,CAACG,MAAD,EAASE,QAAT,CAApB;AAEA;;AACA,GAACP,SAAS,CAACQ,MAAD,CAAV,IAAsB,CAACA,MAAM,CAACC,MAA9B,IAAwCD,MAAM,CAACE,IAA/C,IAAuDX,SAAS,CAAC,CAAD,CAAhE;AACA,SAAOS,MAAM,CAACE,IAAd;AACD","sourcesContent":["import invariant from '../jsutils/invariant';\r\nimport isPromise from '../jsutils/isPromise';\r\nimport { parse } from '../language/parser';\r\nimport { execute } from '../execution/execute';\r\nimport { getIntrospectionQuery } from './introspectionQuery';\r\n/**\r\n * Build an IntrospectionQuery from a GraphQLSchema\r\n *\r\n * IntrospectionQuery is useful for utilities that care about type and field\r\n * relationships, but do not need to traverse through those relationships.\r\n *\r\n * This is the inverse of buildClientSchema. The primary use case is outside\r\n * of the server context, for instance when doing schema comparisons.\r\n */\r\n\r\nexport function introspectionFromSchema(schema, options) {\r\n  var queryAST = parse(getIntrospectionQuery(options));\r\n  var result = execute(schema, queryAST);\r\n\r\n  /* istanbul ignore next */\r\n  !isPromise(result) && !result.errors && result.data || invariant(0);\r\n  return result.data;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}