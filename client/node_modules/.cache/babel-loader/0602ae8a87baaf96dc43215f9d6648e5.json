{"ast":null,"code":"import objectEntries from '../polyfills/objectEntries';\nimport inspect from '../jsutils/inspect';\nimport toObjMap from '../jsutils/toObjMap';\nimport devAssert from '../jsutils/devAssert';\nimport instanceOf from '../jsutils/instanceOf';\nimport defineToJSON from '../jsutils/defineToJSON';\nimport isObjectLike from '../jsutils/isObjectLike';\nimport defineToStringTag from '../jsutils/defineToStringTag';\nimport { DirectiveLocation } from '../language/directiveLocation';\nimport { GraphQLString, GraphQLBoolean } from './scalars';\nimport { argsToArgsConfig, GraphQLNonNull } from './definition';\n/**\r\n * Test if the given value is a GraphQL directive.\r\n */\n// eslint-disable-next-line no-redeclare\n\nexport function isDirective(directive) {\n  return instanceOf(directive, GraphQLDirective);\n}\nexport function assertDirective(directive) {\n  if (!isDirective(directive)) {\n    throw new Error(\"Expected \".concat(inspect(directive), \" to be a GraphQL directive.\"));\n  }\n\n  return directive;\n}\n/**\r\n * Directives are used by the GraphQL runtime as a way of modifying execution\r\n * behavior. Type system creators will usually not create these directly.\r\n */\n\nexport var GraphQLDirective = /*#__PURE__*/function () {\n  function GraphQLDirective(config) {\n    this.name = config.name;\n    this.description = config.description;\n    this.locations = config.locations;\n    this.isRepeatable = config.isRepeatable != null && config.isRepeatable;\n    this.extensions = config.extensions && toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    config.name || devAssert(0, 'Directive must be named.');\n    Array.isArray(config.locations) || devAssert(0, \"@\".concat(config.name, \" locations must be an Array.\"));\n    var args = config.args || {};\n    isObjectLike(args) && !Array.isArray(args) || devAssert(0, \"@\".concat(config.name, \" args must be an object with argument names as keys.\"));\n    this.args = objectEntries(args).map(function (_ref) {\n      var argName = _ref[0],\n          arg = _ref[1];\n      return {\n        name: argName,\n        description: arg.description === undefined ? null : arg.description,\n        type: arg.type,\n        defaultValue: arg.defaultValue,\n        extensions: arg.extensions && toObjMap(arg.extensions),\n        astNode: arg.astNode\n      };\n    });\n  }\n\n  var _proto = GraphQLDirective.prototype;\n\n  _proto.toString = function toString() {\n    return '@' + this.name;\n  };\n\n  _proto.toConfig = function toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      locations: this.locations,\n      args: argsToArgsConfig(this.args),\n      isRepeatable: this.isRepeatable,\n      extensions: this.extensions,\n      astNode: this.astNode\n    };\n  };\n\n  return GraphQLDirective;\n}(); // Conditionally apply `[Symbol.toStringTag]` if `Symbol`s are supported\n\ndefineToStringTag(GraphQLDirective);\ndefineToJSON(GraphQLDirective);\n/**\r\n * Used to conditionally include fields or fragments.\r\n */\n\nexport var GraphQLIncludeDirective = new GraphQLDirective({\n  name: 'include',\n  description: 'Directs the executor to include this field or fragment only when the `if` argument is true.',\n  locations: [DirectiveLocation.FIELD, DirectiveLocation.FRAGMENT_SPREAD, DirectiveLocation.INLINE_FRAGMENT],\n  args: {\n    if: {\n      type: GraphQLNonNull(GraphQLBoolean),\n      description: 'Included when true.'\n    }\n  }\n});\n/**\r\n * Used to conditionally skip (exclude) fields or fragments.\r\n */\n\nexport var GraphQLSkipDirective = new GraphQLDirective({\n  name: 'skip',\n  description: 'Directs the executor to skip this field or fragment when the `if` argument is true.',\n  locations: [DirectiveLocation.FIELD, DirectiveLocation.FRAGMENT_SPREAD, DirectiveLocation.INLINE_FRAGMENT],\n  args: {\n    if: {\n      type: GraphQLNonNull(GraphQLBoolean),\n      description: 'Skipped when true.'\n    }\n  }\n});\n/**\r\n * Constant string used for default reason for a deprecation.\r\n */\n\nexport var DEFAULT_DEPRECATION_REASON = 'No longer supported';\n/**\r\n * Used to declare element of a GraphQL schema as deprecated.\r\n */\n\nexport var GraphQLDeprecatedDirective = new GraphQLDirective({\n  name: 'deprecated',\n  description: 'Marks an element of a GraphQL schema as no longer supported.',\n  locations: [DirectiveLocation.FIELD_DEFINITION, DirectiveLocation.ENUM_VALUE],\n  args: {\n    reason: {\n      type: GraphQLString,\n      description: 'Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax (as specified by [CommonMark](https://commonmark.org/).',\n      defaultValue: DEFAULT_DEPRECATION_REASON\n    }\n  }\n});\n/**\r\n * The full list of specified directives.\r\n */\n\nexport var specifiedDirectives = Object.freeze([GraphQLIncludeDirective, GraphQLSkipDirective, GraphQLDeprecatedDirective]);\nexport function isSpecifiedDirective(directive) {\n  return isDirective(directive) && specifiedDirectives.some(function (_ref2) {\n    var name = _ref2.name;\n    return name === directive.name;\n  });\n}","map":{"version":3,"sources":["C:/Users/Asa/Desktop/repos/shop-shop/client/node_modules/graphql/type/directives.mjs"],"names":["objectEntries","inspect","toObjMap","devAssert","instanceOf","defineToJSON","isObjectLike","defineToStringTag","DirectiveLocation","GraphQLString","GraphQLBoolean","argsToArgsConfig","GraphQLNonNull","isDirective","directive","GraphQLDirective","assertDirective","Error","concat","config","name","description","locations","isRepeatable","extensions","astNode","Array","isArray","args","map","_ref","argName","arg","undefined","type","defaultValue","_proto","prototype","toString","toConfig","GraphQLIncludeDirective","FIELD","FRAGMENT_SPREAD","INLINE_FRAGMENT","if","GraphQLSkipDirective","DEFAULT_DEPRECATION_REASON","GraphQLDeprecatedDirective","FIELD_DEFINITION","ENUM_VALUE","reason","specifiedDirectives","Object","freeze","isSpecifiedDirective","some","_ref2"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,4BAA1B;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,OAAOC,SAAP,MAAsB,sBAAtB;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,OAAOC,iBAAP,MAA8B,8BAA9B;AACA,SAASC,iBAAT,QAAkC,+BAAlC;AACA,SAASC,aAAT,EAAwBC,cAAxB,QAA8C,WAA9C;AACA,SAASC,gBAAT,EAA2BC,cAA3B,QAAiD,cAAjD;AACA;AACA;AACA;AAEA;;AACA,OAAO,SAASC,WAAT,CAAqBC,SAArB,EAAgC;AACrC,SAAOV,UAAU,CAACU,SAAD,EAAYC,gBAAZ,CAAjB;AACD;AACD,OAAO,SAASC,eAAT,CAAyBF,SAAzB,EAAoC;AACzC,MAAI,CAACD,WAAW,CAACC,SAAD,CAAhB,EAA6B;AAC3B,UAAM,IAAIG,KAAJ,CAAU,YAAYC,MAAZ,CAAmBjB,OAAO,CAACa,SAAD,CAA1B,EAAuC,6BAAvC,CAAV,CAAN;AACD;;AAED,SAAOA,SAAP;AACD;AACD;AACA;AACA;AACA;;AAEA,OAAO,IAAIC,gBAAgB,GAC3B,aACA,YAAY;AACV,WAASA,gBAAT,CAA0BI,MAA1B,EAAkC;AAChC,SAAKC,IAAL,GAAYD,MAAM,CAACC,IAAnB;AACA,SAAKC,WAAL,GAAmBF,MAAM,CAACE,WAA1B;AACA,SAAKC,SAAL,GAAiBH,MAAM,CAACG,SAAxB;AACA,SAAKC,YAAL,GAAoBJ,MAAM,CAACI,YAAP,IAAuB,IAAvB,IAA+BJ,MAAM,CAACI,YAA1D;AACA,SAAKC,UAAL,GAAkBL,MAAM,CAACK,UAAP,IAAqBtB,QAAQ,CAACiB,MAAM,CAACK,UAAR,CAA/C;AACA,SAAKC,OAAL,GAAeN,MAAM,CAACM,OAAtB;AACAN,IAAAA,MAAM,CAACC,IAAP,IAAejB,SAAS,CAAC,CAAD,EAAI,0BAAJ,CAAxB;AACAuB,IAAAA,KAAK,CAACC,OAAN,CAAcR,MAAM,CAACG,SAArB,KAAmCnB,SAAS,CAAC,CAAD,EAAI,IAAIe,MAAJ,CAAWC,MAAM,CAACC,IAAlB,EAAwB,8BAAxB,CAAJ,CAA5C;AACA,QAAIQ,IAAI,GAAGT,MAAM,CAACS,IAAP,IAAe,EAA1B;AACAtB,IAAAA,YAAY,CAACsB,IAAD,CAAZ,IAAsB,CAACF,KAAK,CAACC,OAAN,CAAcC,IAAd,CAAvB,IAA8CzB,SAAS,CAAC,CAAD,EAAI,IAAIe,MAAJ,CAAWC,MAAM,CAACC,IAAlB,EAAwB,sDAAxB,CAAJ,CAAvD;AACA,SAAKQ,IAAL,GAAY5B,aAAa,CAAC4B,IAAD,CAAb,CAAoBC,GAApB,CAAwB,UAAUC,IAAV,EAAgB;AAClD,UAAIC,OAAO,GAAGD,IAAI,CAAC,CAAD,CAAlB;AAAA,UACIE,GAAG,GAAGF,IAAI,CAAC,CAAD,CADd;AAEA,aAAO;AACLV,QAAAA,IAAI,EAAEW,OADD;AAELV,QAAAA,WAAW,EAAEW,GAAG,CAACX,WAAJ,KAAoBY,SAApB,GAAgC,IAAhC,GAAuCD,GAAG,CAACX,WAFnD;AAGLa,QAAAA,IAAI,EAAEF,GAAG,CAACE,IAHL;AAILC,QAAAA,YAAY,EAAEH,GAAG,CAACG,YAJb;AAKLX,QAAAA,UAAU,EAAEQ,GAAG,CAACR,UAAJ,IAAkBtB,QAAQ,CAAC8B,GAAG,CAACR,UAAL,CALjC;AAMLC,QAAAA,OAAO,EAAEO,GAAG,CAACP;AANR,OAAP;AAQD,KAXW,CAAZ;AAYD;;AAED,MAAIW,MAAM,GAAGrB,gBAAgB,CAACsB,SAA9B;;AAEAD,EAAAA,MAAM,CAACE,QAAP,GAAkB,SAASA,QAAT,GAAoB;AACpC,WAAO,MAAM,KAAKlB,IAAlB;AACD,GAFD;;AAIAgB,EAAAA,MAAM,CAACG,QAAP,GAAkB,SAASA,QAAT,GAAoB;AACpC,WAAO;AACLnB,MAAAA,IAAI,EAAE,KAAKA,IADN;AAELC,MAAAA,WAAW,EAAE,KAAKA,WAFb;AAGLC,MAAAA,SAAS,EAAE,KAAKA,SAHX;AAILM,MAAAA,IAAI,EAAEjB,gBAAgB,CAAC,KAAKiB,IAAN,CAJjB;AAKLL,MAAAA,YAAY,EAAE,KAAKA,YALd;AAMLC,MAAAA,UAAU,EAAE,KAAKA,UANZ;AAOLC,MAAAA,OAAO,EAAE,KAAKA;AAPT,KAAP;AASD,GAVD;;AAYA,SAAOV,gBAAP;AACD,CA7CD,EAFO,C,CA+CF;;AAELR,iBAAiB,CAACQ,gBAAD,CAAjB;AACAV,YAAY,CAACU,gBAAD,CAAZ;AAEA;AACA;AACA;;AACA,OAAO,IAAIyB,uBAAuB,GAAG,IAAIzB,gBAAJ,CAAqB;AACxDK,EAAAA,IAAI,EAAE,SADkD;AAExDC,EAAAA,WAAW,EAAE,6FAF2C;AAGxDC,EAAAA,SAAS,EAAE,CAACd,iBAAiB,CAACiC,KAAnB,EAA0BjC,iBAAiB,CAACkC,eAA5C,EAA6DlC,iBAAiB,CAACmC,eAA/E,CAH6C;AAIxDf,EAAAA,IAAI,EAAE;AACJgB,IAAAA,EAAE,EAAE;AACFV,MAAAA,IAAI,EAAEtB,cAAc,CAACF,cAAD,CADlB;AAEFW,MAAAA,WAAW,EAAE;AAFX;AADA;AAJkD,CAArB,CAA9B;AAWP;AACA;AACA;;AAEA,OAAO,IAAIwB,oBAAoB,GAAG,IAAI9B,gBAAJ,CAAqB;AACrDK,EAAAA,IAAI,EAAE,MAD+C;AAErDC,EAAAA,WAAW,EAAE,qFAFwC;AAGrDC,EAAAA,SAAS,EAAE,CAACd,iBAAiB,CAACiC,KAAnB,EAA0BjC,iBAAiB,CAACkC,eAA5C,EAA6DlC,iBAAiB,CAACmC,eAA/E,CAH0C;AAIrDf,EAAAA,IAAI,EAAE;AACJgB,IAAAA,EAAE,EAAE;AACFV,MAAAA,IAAI,EAAEtB,cAAc,CAACF,cAAD,CADlB;AAEFW,MAAAA,WAAW,EAAE;AAFX;AADA;AAJ+C,CAArB,CAA3B;AAWP;AACA;AACA;;AAEA,OAAO,IAAIyB,0BAA0B,GAAG,qBAAjC;AACP;AACA;AACA;;AAEA,OAAO,IAAIC,0BAA0B,GAAG,IAAIhC,gBAAJ,CAAqB;AAC3DK,EAAAA,IAAI,EAAE,YADqD;AAE3DC,EAAAA,WAAW,EAAE,8DAF8C;AAG3DC,EAAAA,SAAS,EAAE,CAACd,iBAAiB,CAACwC,gBAAnB,EAAqCxC,iBAAiB,CAACyC,UAAvD,CAHgD;AAI3DrB,EAAAA,IAAI,EAAE;AACJsB,IAAAA,MAAM,EAAE;AACNhB,MAAAA,IAAI,EAAEzB,aADA;AAENY,MAAAA,WAAW,EAAE,qNAFP;AAGNc,MAAAA,YAAY,EAAEW;AAHR;AADJ;AAJqD,CAArB,CAAjC;AAYP;AACA;AACA;;AAEA,OAAO,IAAIK,mBAAmB,GAAGC,MAAM,CAACC,MAAP,CAAc,CAACb,uBAAD,EAA0BK,oBAA1B,EAAgDE,0BAAhD,CAAd,CAA1B;AACP,OAAO,SAASO,oBAAT,CAA8BxC,SAA9B,EAAyC;AAC9C,SAAOD,WAAW,CAACC,SAAD,CAAX,IAA0BqC,mBAAmB,CAACI,IAApB,CAAyB,UAAUC,KAAV,EAAiB;AACzE,QAAIpC,IAAI,GAAGoC,KAAK,CAACpC,IAAjB;AACA,WAAOA,IAAI,KAAKN,SAAS,CAACM,IAA1B;AACD,GAHgC,CAAjC;AAID","sourcesContent":["import objectEntries from '../polyfills/objectEntries';\r\nimport inspect from '../jsutils/inspect';\r\nimport toObjMap from '../jsutils/toObjMap';\r\nimport devAssert from '../jsutils/devAssert';\r\nimport instanceOf from '../jsutils/instanceOf';\r\nimport defineToJSON from '../jsutils/defineToJSON';\r\nimport isObjectLike from '../jsutils/isObjectLike';\r\nimport defineToStringTag from '../jsutils/defineToStringTag';\r\nimport { DirectiveLocation } from '../language/directiveLocation';\r\nimport { GraphQLString, GraphQLBoolean } from './scalars';\r\nimport { argsToArgsConfig, GraphQLNonNull } from './definition';\r\n/**\r\n * Test if the given value is a GraphQL directive.\r\n */\r\n\r\n// eslint-disable-next-line no-redeclare\r\nexport function isDirective(directive) {\r\n  return instanceOf(directive, GraphQLDirective);\r\n}\r\nexport function assertDirective(directive) {\r\n  if (!isDirective(directive)) {\r\n    throw new Error(\"Expected \".concat(inspect(directive), \" to be a GraphQL directive.\"));\r\n  }\r\n\r\n  return directive;\r\n}\r\n/**\r\n * Directives are used by the GraphQL runtime as a way of modifying execution\r\n * behavior. Type system creators will usually not create these directly.\r\n */\r\n\r\nexport var GraphQLDirective =\r\n/*#__PURE__*/\r\nfunction () {\r\n  function GraphQLDirective(config) {\r\n    this.name = config.name;\r\n    this.description = config.description;\r\n    this.locations = config.locations;\r\n    this.isRepeatable = config.isRepeatable != null && config.isRepeatable;\r\n    this.extensions = config.extensions && toObjMap(config.extensions);\r\n    this.astNode = config.astNode;\r\n    config.name || devAssert(0, 'Directive must be named.');\r\n    Array.isArray(config.locations) || devAssert(0, \"@\".concat(config.name, \" locations must be an Array.\"));\r\n    var args = config.args || {};\r\n    isObjectLike(args) && !Array.isArray(args) || devAssert(0, \"@\".concat(config.name, \" args must be an object with argument names as keys.\"));\r\n    this.args = objectEntries(args).map(function (_ref) {\r\n      var argName = _ref[0],\r\n          arg = _ref[1];\r\n      return {\r\n        name: argName,\r\n        description: arg.description === undefined ? null : arg.description,\r\n        type: arg.type,\r\n        defaultValue: arg.defaultValue,\r\n        extensions: arg.extensions && toObjMap(arg.extensions),\r\n        astNode: arg.astNode\r\n      };\r\n    });\r\n  }\r\n\r\n  var _proto = GraphQLDirective.prototype;\r\n\r\n  _proto.toString = function toString() {\r\n    return '@' + this.name;\r\n  };\r\n\r\n  _proto.toConfig = function toConfig() {\r\n    return {\r\n      name: this.name,\r\n      description: this.description,\r\n      locations: this.locations,\r\n      args: argsToArgsConfig(this.args),\r\n      isRepeatable: this.isRepeatable,\r\n      extensions: this.extensions,\r\n      astNode: this.astNode\r\n    };\r\n  };\r\n\r\n  return GraphQLDirective;\r\n}(); // Conditionally apply `[Symbol.toStringTag]` if `Symbol`s are supported\r\n\r\ndefineToStringTag(GraphQLDirective);\r\ndefineToJSON(GraphQLDirective);\r\n\r\n/**\r\n * Used to conditionally include fields or fragments.\r\n */\r\nexport var GraphQLIncludeDirective = new GraphQLDirective({\r\n  name: 'include',\r\n  description: 'Directs the executor to include this field or fragment only when the `if` argument is true.',\r\n  locations: [DirectiveLocation.FIELD, DirectiveLocation.FRAGMENT_SPREAD, DirectiveLocation.INLINE_FRAGMENT],\r\n  args: {\r\n    if: {\r\n      type: GraphQLNonNull(GraphQLBoolean),\r\n      description: 'Included when true.'\r\n    }\r\n  }\r\n});\r\n/**\r\n * Used to conditionally skip (exclude) fields or fragments.\r\n */\r\n\r\nexport var GraphQLSkipDirective = new GraphQLDirective({\r\n  name: 'skip',\r\n  description: 'Directs the executor to skip this field or fragment when the `if` argument is true.',\r\n  locations: [DirectiveLocation.FIELD, DirectiveLocation.FRAGMENT_SPREAD, DirectiveLocation.INLINE_FRAGMENT],\r\n  args: {\r\n    if: {\r\n      type: GraphQLNonNull(GraphQLBoolean),\r\n      description: 'Skipped when true.'\r\n    }\r\n  }\r\n});\r\n/**\r\n * Constant string used for default reason for a deprecation.\r\n */\r\n\r\nexport var DEFAULT_DEPRECATION_REASON = 'No longer supported';\r\n/**\r\n * Used to declare element of a GraphQL schema as deprecated.\r\n */\r\n\r\nexport var GraphQLDeprecatedDirective = new GraphQLDirective({\r\n  name: 'deprecated',\r\n  description: 'Marks an element of a GraphQL schema as no longer supported.',\r\n  locations: [DirectiveLocation.FIELD_DEFINITION, DirectiveLocation.ENUM_VALUE],\r\n  args: {\r\n    reason: {\r\n      type: GraphQLString,\r\n      description: 'Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax (as specified by [CommonMark](https://commonmark.org/).',\r\n      defaultValue: DEFAULT_DEPRECATION_REASON\r\n    }\r\n  }\r\n});\r\n/**\r\n * The full list of specified directives.\r\n */\r\n\r\nexport var specifiedDirectives = Object.freeze([GraphQLIncludeDirective, GraphQLSkipDirective, GraphQLDeprecatedDirective]);\r\nexport function isSpecifiedDirective(directive) {\r\n  return isDirective(directive) && specifiedDirectives.some(function (_ref2) {\r\n    var name = _ref2.name;\r\n    return name === directive.name;\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}