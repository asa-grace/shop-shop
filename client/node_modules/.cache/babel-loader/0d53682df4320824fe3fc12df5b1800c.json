{"ast":null,"code":"import { GraphQLError } from './GraphQLError';\n/**\r\n * Given an arbitrary Error, presumably thrown while attempting to execute a\r\n * GraphQL operation, produce a new GraphQLError aware of the location in the\r\n * document responsible for the original Error.\r\n */\n\nexport function locatedError(originalError, nodes, path) {\n  // Note: this uses a brand-check to support GraphQL errors originating from\n  // other contexts.\n  if (originalError && Array.isArray(originalError.path)) {\n    return originalError;\n  }\n\n  return new GraphQLError(originalError && originalError.message, originalError && originalError.nodes || nodes, originalError && originalError.source, originalError && originalError.positions, path, originalError);\n}","map":{"version":3,"sources":["C:/Users/Asa/Desktop/repos/shop-shop/client/node_modules/graphql/error/locatedError.mjs"],"names":["GraphQLError","locatedError","originalError","nodes","path","Array","isArray","message","source","positions"],"mappings":"AAAA,SAASA,YAAT,QAA6B,gBAA7B;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,YAAT,CAAsBC,aAAtB,EAAqCC,KAArC,EAA4CC,IAA5C,EAAkD;AACvD;AACA;AACA,MAAIF,aAAa,IAAIG,KAAK,CAACC,OAAN,CAAcJ,aAAa,CAACE,IAA5B,CAArB,EAAwD;AACtD,WAAOF,aAAP;AACD;;AAED,SAAO,IAAIF,YAAJ,CAAiBE,aAAa,IAAIA,aAAa,CAACK,OAAhD,EAAyDL,aAAa,IAAIA,aAAa,CAACC,KAA/B,IAAwCA,KAAjG,EAAwGD,aAAa,IAAIA,aAAa,CAACM,MAAvI,EAA+IN,aAAa,IAAIA,aAAa,CAACO,SAA9K,EAAyLL,IAAzL,EAA+LF,aAA/L,CAAP;AACD","sourcesContent":["import { GraphQLError } from './GraphQLError';\r\n/**\r\n * Given an arbitrary Error, presumably thrown while attempting to execute a\r\n * GraphQL operation, produce a new GraphQLError aware of the location in the\r\n * document responsible for the original Error.\r\n */\r\n\r\nexport function locatedError(originalError, nodes, path) {\r\n  // Note: this uses a brand-check to support GraphQL errors originating from\r\n  // other contexts.\r\n  if (originalError && Array.isArray(originalError.path)) {\r\n    return originalError;\r\n  }\r\n\r\n  return new GraphQLError(originalError && originalError.message, originalError && originalError.nodes || nodes, originalError && originalError.source, originalError && originalError.positions, path, originalError);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}